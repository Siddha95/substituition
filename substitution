#include <stdio.h>
#include <ctype.h>
#include <string.h>

#define ALPHABET_SIZE 26

int is_valid_key(const char *key);
char encrypt_char(char c, const char *key);
void encrypt_message(const char *plaintext, const char *key);

int main(int argc, char *argv[])
{
    // Check the number of command-line arguments
    if (argc != 2)
    {
        printf("Usage: ./substitution key\n");
        return 1;
    }

    // Get the key from the command-line argument
    char *key = argv[1];

    // Check if the key is valid
    if (!is_valid_key(key))
    {
        printf("Key must contain 26 characters.\n");
        return 1;
    }

    // Prompt the user for plaintext
    char plaintext[100];
    printf("plaintext: ");
    fgets(plaintext, sizeof(plaintext), stdin);

    // Encrypt and print the ciphertext
    printf("ciphertext: ");
    encrypt_message(plaintext, key);

    return 0;
}

int is_valid_key(const char *key)
{
    int key_length = strlen(key);

    // Check if the key has 26 characters
    if (key_length != ALPHABET_SIZE)
    {
        return 0;
    }

    int char_count[ALPHABET_SIZE] = {0};

    // Check if each character is alphabetic and occurs exactly once
    for (int i = 0; i < key_length; i++)
    {
        char c = key[i];

        if (!isalpha(c))
        {
            return 0;
        }

        int index = tolower(c) - 'a';

        if (char_count[index] > 0)
        {
            return 0;
        }

        char_count[index]++;
    }

    return 1;
}

char encrypt_char(char c, const char *key)
{
    if (isalpha(c))
    {
        int index = tolower(c) - 'a';
        return isupper(c) ? toupper(key[index]) : tolower(key[index]);
    }
    else
    {
        return c;
    }
}

void encrypt_message(const char *plaintext, const char *key)
{
    int length = strlen(plaintext);

    for (int i = 0; i < length; i++)
    {
        char c = plaintext[i];
        printf("%c", encrypt_char(c, key));
    }

    printf("\n");
}
